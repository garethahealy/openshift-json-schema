{
  "description": "NooBaa is the Schema for the NooBaas API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "noobaa.io/v1alpha1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "NooBaa"
      ]
    },
    "metadata": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "creationTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ]
          },
          "x-kubernetes-list-type": "set",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": [
            "string",
            "null"
          ]
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldsType": {
                "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldsV1": {
                "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                "type": [
                  "object",
                  "null"
                ]
              },
              "manager": {
                "description": "Manager is an identifier of the workflow managing these fields.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "operation": {
                "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "subresource": {
                "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "time": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-type": "atomic"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
          "type": [
            "string",
            "null"
          ]
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
          "type": [
            "string",
            "null"
          ]
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "apiVersion",
              "kind",
              "name",
              "uid"
            ],
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string"
              },
              "blockOwnerDeletion": {
                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "controller": {
                "description": "If true, this reference points to the managing controller.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "kind": {
                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "name": {
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                "type": "string"
              },
              "uid": {
                "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                "type": "string"
              }
            },
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "uid"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": [
            "string",
            "null"
          ]
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": [
            "string",
            "null"
          ]
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "spec": {
      "description": "Specification of the desired behavior of the noobaa system.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "affinity": {
          "description": "Affinity (optional) passed through to noobaa's pods",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "nodeAffinity": {
              "description": "Describes node affinity scheduling rules for the pod.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "An empty preferred scheduling term matches all objects with implicit weight 0\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "preference",
                      "weight"
                    ],
                    "properties": {
                      "preference": {
                        "description": "A node selector term, associated with the corresponding weight.",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "A list of node selector requirements by node's labels.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "additionalProperties": false
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchFields": {
                            "description": "A list of node selector requirements by node's fields.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "additionalProperties": false
                            },
                            "x-kubernetes-list-type": "atomic"
                          }
                        },
                        "x-kubernetes-map-type": "atomic",
                        "additionalProperties": false
                      },
                      "weight": {
                        "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "nodeSelectorTerms"
                  ],
                  "properties": {
                    "nodeSelectorTerms": {
                      "description": "Required. A list of node selector terms. The terms are ORed.",
                      "type": "array",
                      "items": {
                        "description": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "matchExpressions": {
                            "description": "A list of node selector requirements by node's labels.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "additionalProperties": false
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchFields": {
                            "description": "A list of node selector requirements by node's fields.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "additionalProperties": false
                            },
                            "x-kubernetes-list-type": "atomic"
                          }
                        },
                        "x-kubernetes-map-type": "atomic",
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  },
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "podAffinity": {
              "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "podAffinityTerm",
                      "weight"
                    ],
                    "properties": {
                      "podAffinityTerm": {
                        "description": "Required. A pod affinity term, associated with the corresponding weight.",
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                            "type": [
                              "object",
                              "null"
                            ],
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "additionalProperties": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              }
                            },
                            "x-kubernetes-map-type": "atomic",
                            "additionalProperties": false
                          },
                          "matchLabelKeys": {
                            "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "mismatchLabelKeys": {
                            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "namespaceSelector": {
                            "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                            "type": [
                              "object",
                              "null"
                            ],
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "additionalProperties": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              }
                            },
                            "x-kubernetes-map-type": "atomic",
                            "additionalProperties": false
                          },
                          "namespaces": {
                            "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "weight": {
                        "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "topologyKey"
                    ],
                    "properties": {
                      "labelSelector": {
                        "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "additionalProperties": false
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": [
                              "object",
                              "null"
                            ],
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        },
                        "x-kubernetes-map-type": "atomic",
                        "additionalProperties": false
                      },
                      "matchLabelKeys": {
                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "mismatchLabelKeys": {
                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "namespaceSelector": {
                        "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "additionalProperties": false
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": [
                              "object",
                              "null"
                            ],
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        },
                        "x-kubernetes-map-type": "atomic",
                        "additionalProperties": false
                      },
                      "namespaces": {
                        "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "topologyKey": {
                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-type": "atomic"
                }
              },
              "additionalProperties": false
            },
            "podAntiAffinity": {
              "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "podAffinityTerm",
                      "weight"
                    ],
                    "properties": {
                      "podAffinityTerm": {
                        "description": "Required. A pod affinity term, associated with the corresponding weight.",
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                            "type": [
                              "object",
                              "null"
                            ],
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "additionalProperties": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              }
                            },
                            "x-kubernetes-map-type": "atomic",
                            "additionalProperties": false
                          },
                          "matchLabelKeys": {
                            "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "mismatchLabelKeys": {
                            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "namespaceSelector": {
                            "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                            "type": [
                              "object",
                              "null"
                            ],
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "additionalProperties": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              }
                            },
                            "x-kubernetes-map-type": "atomic",
                            "additionalProperties": false
                          },
                          "namespaces": {
                            "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "weight": {
                        "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "topologyKey"
                    ],
                    "properties": {
                      "labelSelector": {
                        "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "additionalProperties": false
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": [
                              "object",
                              "null"
                            ],
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        },
                        "x-kubernetes-map-type": "atomic",
                        "additionalProperties": false
                      },
                      "matchLabelKeys": {
                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "mismatchLabelKeys": {
                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "namespaceSelector": {
                        "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "additionalProperties": false
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": [
                              "object",
                              "null"
                            ],
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        },
                        "x-kubernetes-map-type": "atomic",
                        "additionalProperties": false
                      },
                      "namespaces": {
                        "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "topologyKey": {
                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-type": "atomic"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "annotations": {
          "description": "The annotations-related configuration to add/set on each Pod related object.",
          "additionalProperties": {
            "description": "Annotations are annotation for a given daemon",
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "x-kubernetes-preserve-unknown-fields": true
        },
        "autoscaler": {
          "description": "Configuration related to autoscaling",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "autoscalerType": {
              "description": "Type of autoscaling (optional) for noobaa-endpoint, hpav2(default) and keda - Prometheus metrics based",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "hpav2",
                "keda"
              ]
            },
            "prometheusNamespace": {
              "description": "Prometheus namespace that scrap metrics from noobaa",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "bucketLogging": {
          "description": "BucketLogging sets the configuration for bucket logging",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "bucketLoggingPVC": {
              "description": "BucketLoggingPVC (optional) specifies the name of the Persistent Volume Claim (PVC) to be used\nfor guaranteed logging when the logging type is set to 'guaranteed'. The PVC must support\nReadWriteMany (RWX) access mode to ensure reliable logging.\nFor ODF: If not provided, the default CephFS storage class will be used to create the PVC.",
              "type": [
                "string",
                "null"
              ]
            },
            "loggingType": {
              "description": "LoggingType specifies the type of logging for the bucket\nThere are two types available: best-effort and guaranteed logging\n- best-effort(default) - less immune to failures but with better performance\n- guaranteed - much more reliable but need to provide a storage class that supports RWX PVs",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "bucketNotifications": {
          "description": "BucketNotifications (optional) controls bucket notification options",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "enabled"
          ],
          "properties": {
            "connections": {
              "description": "Connections - A list of secrets' names that are used by the notifications configrations\n(in the TopicArn field).",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret\nin any namespace",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "name": {
                    "description": "name is unique within a namespace to reference a secret resource.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "namespace": {
                    "description": "namespace defines the space within which the secret name must be unique.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "x-kubernetes-map-type": "atomic",
                "additionalProperties": false
              }
            },
            "enabled": {
              "description": "Enabled - whether bucket notifications is enabled",
              "type": "boolean"
            },
            "pvc": {
              "description": "PVC (optional) specifies the name of the Persistent Volume Claim (PVC) to be used\nfor holding pending notifications files.\nFor ODF - If not provided, the default CepthFS storage class will be used to create the PVC.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "cleanupPolicy": {
          "description": "CleanupPolicy (optional) Indicates user's policy for deletion",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "allowNoobaaDeletion": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "confirmation": {
              "description": "CleanupConfirmationProperty is a string that specifies cleanup confirmation",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "coreResources": {
          "description": "CoreResources (optional) overrides the default resource requirements for the server container",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "claims": {
              "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                    "type": "string"
                  },
                  "request": {
                    "description": "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-map-keys": [
                "name"
              ],
              "x-kubernetes-list-type": "map"
            },
            "limits": {
              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "x-kubernetes-int-or-string": true
              }
            },
            "requests": {
              "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "x-kubernetes-int-or-string": true
              }
            }
          },
          "additionalProperties": false
        },
        "dbConf": {
          "description": "DBConf (optional) overrides the default postgresql db config",
          "type": [
            "string",
            "null"
          ]
        },
        "dbImage": {
          "description": "DBImage (optional) overrides the default image for the db container",
          "type": [
            "string",
            "null"
          ]
        },
        "dbResources": {
          "description": "DBResources (optional) overrides the default resource requirements for the db container",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "claims": {
              "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                    "type": "string"
                  },
                  "request": {
                    "description": "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-map-keys": [
                "name"
              ],
              "x-kubernetes-list-type": "map"
            },
            "limits": {
              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "x-kubernetes-int-or-string": true
              }
            },
            "requests": {
              "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "x-kubernetes-int-or-string": true
              }
            }
          },
          "additionalProperties": false
        },
        "dbStorageClass": {
          "description": "DBStorageClass (optional) overrides the default cluster StorageClass for the database volume.\nFor the time being this field is immutable and can only be set on system creation.\nThis affects where the system stores its database which contains system config,\nbuckets, objects meta-data and mapping file parts to storage locations.",
          "type": [
            "string",
            "null"
          ]
        },
        "dbType": {
          "description": "DBType (optional) overrides the default type image for the db container.\nThe only possible value is postgres",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "postgres"
          ]
        },
        "dbVolumeResources": {
          "description": "DBVolumeResources (optional) overrides the default PVC resource requirements for the database volume.\nFor the time being this field is immutable and can only be set on system creation.\nThis is because volume size updates are only supported for increasing the size,\nand only if the storage class specifies `allowVolumeExpansion: true`,",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "limits": {
              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "x-kubernetes-int-or-string": true
              }
            },
            "requests": {
              "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "x-kubernetes-int-or-string": true
              }
            }
          },
          "additionalProperties": false
        },
        "debugLevel": {
          "description": "DebugLevel (optional) sets the debug level",
          "type": [
            "integer",
            "null"
          ],
          "enum": [
            "all",
            "nsfs",
            "warn",
            "default_level"
          ]
        },
        "defaultBackingStoreSpec": {
          "description": "Deprecated: DefaultBackingStoreSpec is not supported anymore, use ManualDefaultBackingStore instead.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "type"
          ],
          "properties": {
            "awsS3": {
              "description": "AWSS3Spec specifies a backing store of type aws-s3",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "targetBucket"
              ],
              "properties": {
                "awsSTSRoleARN": {
                  "description": "AWSSTSRoleARN allows to Assume Role and use AssumeRoleWithWebIdentity",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "region": {
                  "description": "Region is the AWS region",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "secret": {
                  "description": "Secret refers to a secret that provides the credentials\nThe secret should define AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "name": {
                      "description": "name is unique within a namespace to reference a secret resource.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "namespace defines the space within which the secret name must be unique.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                },
                "sslDisabled": {
                  "description": "SSLDisabled allows to disable SSL and use plain http",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "targetBucket": {
                  "description": "TargetBucket is the name of the target S3 bucket",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "azureBlob": {
              "description": "AzureBlob specifies a backing store of type azure-blob",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "secret",
                "targetBlobContainer"
              ],
              "properties": {
                "secret": {
                  "description": "Secret refers to a secret that provides the credentials\nThe secret should define AccountName and AccountKey as provided by Azure Blob.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "name is unique within a namespace to reference a secret resource.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "namespace defines the space within which the secret name must be unique.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                },
                "targetBlobContainer": {
                  "description": "TargetBlobContainer is the name of the target Azure Blob container",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "googleCloudStorage": {
              "description": "GoogleCloudStorage specifies a backing store of type google-cloud-storage",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "secret",
                "targetBucket"
              ],
              "properties": {
                "secret": {
                  "description": "Secret refers to a secret that provides the credentials\nThe secret should define GoogleServiceAccountPrivateKeyJson containing the entire json string as provided by Google.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "name is unique within a namespace to reference a secret resource.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "namespace defines the space within which the secret name must be unique.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                },
                "targetBucket": {
                  "description": "TargetBucket is the name of the target S3 bucket",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "ibmCos": {
              "description": "IBMCos specifies a backing store of type ibm-cos",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "endpoint",
                "secret",
                "targetBucket"
              ],
              "properties": {
                "endpoint": {
                  "description": "Endpoint is the IBM COS compatible endpoint: http(s)://host:port",
                  "type": "string"
                },
                "secret": {
                  "description": "Secret refers to a secret that provides the credentials\nThe secret should define IBM_COS_ACCESS_KEY_ID and IBM_COS_SECRET_ACCESS_KEY",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "name is unique within a namespace to reference a secret resource.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "namespace defines the space within which the secret name must be unique.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                },
                "signatureVersion": {
                  "description": "SignatureVersion specifies the client signature version to use when signing requests.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "targetBucket": {
                  "description": "TargetBucket is the name of the target IBM COS bucket",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "pvPool": {
              "description": "PVPool specifies a backing store of type pv-pool",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "numVolumes"
              ],
              "properties": {
                "numVolumes": {
                  "description": "NumVolumes is the number of volumes to allocate",
                  "type": "integer"
                },
                "resources": {
                  "description": "VolumeResources represents the minimum resources each volume should have.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "secret": {
                  "description": "Secret refers to a secret that provides the agent configuration\nThe secret should define AGENT_CONFIG containing agent_configuration from noobaa-core.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "name": {
                      "description": "name is unique within a namespace to reference a secret resource.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "namespace defines the space within which the secret name must be unique.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                },
                "storageClass": {
                  "description": "StorageClass is the name of the storage class to use for the PV's",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            },
            "s3Compatible": {
              "description": "S3Compatible specifies a backing store of type s3-compatible",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "endpoint",
                "secret",
                "targetBucket"
              ],
              "properties": {
                "endpoint": {
                  "description": "Endpoint is the S3 compatible endpoint: http(s)://host:port",
                  "type": "string"
                },
                "secret": {
                  "description": "Secret refers to a secret that provides the credentials\nThe secret should define AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "name is unique within a namespace to reference a secret resource.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "namespace defines the space within which the secret name must be unique.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                },
                "signatureVersion": {
                  "description": "SignatureVersion specifies the client signature version to use when signing requests.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "targetBucket": {
                  "description": "TargetBucket is the name of the target S3 bucket",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "type": {
              "description": "Type is an enum of supported types",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "denyHTTP": {
          "description": "DenyHTTP (optional) if given will deny access to the NooBaa S3 service using HTTP (only HTTPS)",
          "type": [
            "boolean",
            "null"
          ]
        },
        "disableLoadBalancerService": {
          "description": "DisableLoadBalancerService (optional) sets the service type to ClusterIP instead of LoadBalancer"
        },
        "endpoints": {
          "description": "Endpoints (optional) sets configuration info for the noobaa endpoint\ndeployment.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "additionalVirtualHosts": {
              "description": "AdditionalVirtualHosts (optional) provide a list of additional hostnames\n(on top of the builtin names defined by the cluster: service name, elb name, route name)\nto be used as virtual hosts by the the endpoints in the endpoint deployment",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "maxCount": {
              "description": "MaxCount, the number of endpoint instances (pods)\nto be used as the upper bound when autoscaling",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "minCount": {
              "description": "MinCount, the number of endpoint instances (pods)\nto be used as the lower bound when autoscaling",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "resources": {
              "description": "Resources (optional) overrides the default resource requirements for every endpoint pod",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "claims": {
                  "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                        "type": "string"
                      },
                      "request": {
                        "description": "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                },
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "externalPgSSLRequired": {
          "description": "ExternalPgSSLRequired (optional) holds an optional boolean to force ssl connections to the external Postgres DB",
          "type": [
            "boolean",
            "null"
          ]
        },
        "externalPgSSLSecret": {
          "description": "ExternalPgSSLSecret (optional) holds an optional secret with client key and cert used for connecting to external Postgres DB",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "name": {
              "description": "name is unique within a namespace to reference a secret resource.",
              "type": [
                "string",
                "null"
              ]
            },
            "namespace": {
              "description": "namespace defines the space within which the secret name must be unique.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "externalPgSSLUnauthorized": {
          "description": "ExternalPgSSLUnauthorized (optional) holds an optional boolean to allow unauthorized connections to external Postgres DB",
          "type": [
            "boolean",
            "null"
          ]
        },
        "externalPgSecret": {
          "description": "ExternalPgSecret (optional) holds an optional secret with a url to an extrenal Postgres DB to be used",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "name": {
              "description": "name is unique within a namespace to reference a secret resource.",
              "type": [
                "string",
                "null"
              ]
            },
            "namespace": {
              "description": "namespace defines the space within which the secret name must be unique.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "image": {
          "description": "Image (optional) overrides the default image for the server container",
          "type": [
            "string",
            "null"
          ]
        },
        "imagePullSecret": {
          "description": "ImagePullSecret (optional) sets a pull secret for the system image",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "name": {
              "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "joinSecret": {
          "description": "JoinSecret (optional) instructs the operator to join another cluster\nand point to a secret that holds the join information",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "name": {
              "description": "name is unique within a namespace to reference a secret resource.",
              "type": [
                "string",
                "null"
              ]
            },
            "namespace": {
              "description": "namespace defines the space within which the secret name must be unique.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "labels": {
          "description": "The labels-related configuration to add/set on each Pod related object.",
          "additionalProperties": {
            "description": "Labels are label for a given daemon",
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "x-kubernetes-preserve-unknown-fields": true
        },
        "loadBalancerSourceSubnets": {
          "description": "LoadBalancerSourceSubnets (optional) if given will allow access to the NooBaa services\nonly from the listed subnets. This field will have no effect if DisableLoadBalancerService is set\nto true",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "s3": {
              "description": "S3 is a list of subnets that will be allowed to access the Noobaa S3 service",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "sts": {
              "description": "STS is a list of subnets that will be allowed to access the Noobaa STS service",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "additionalProperties": false
        },
        "logResources": {
          "description": "LogResources (optional) overrides the default resource requirements for the noobaa-log-processor container",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "claims": {
              "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                    "type": "string"
                  },
                  "request": {
                    "description": "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-map-keys": [
                "name"
              ],
              "x-kubernetes-list-type": "map"
            },
            "limits": {
              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "x-kubernetes-int-or-string": true
              }
            },
            "requests": {
              "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "x-kubernetes-int-or-string": true
              }
            }
          },
          "additionalProperties": false
        },
        "manualDefaultBackingStore": {
          "description": "ManualDefaultBackingStore (optional - default value is false) if true the default backingstore/namespacestore\nwill not be reconciled by the operator and it should be manually handled by the user. It will allow the\nuser to  delete DefaultBackingStore/DefaultNamespaceStore, user needs to delete associated buckets and\nupdate the admin account with new BackingStore/NamespaceStore in order to delete the DefaultBackingStore/DefaultNamespaceStore"
        },
        "pvPoolDefaultStorageClass": {
          "description": "PVPoolDefaultStorageClass (optional) overrides the default cluster StorageClass for the pv-pool volumes.\nThis affects where the system stores data chunks (encrypted).\nUpdates to this field will only affect new pv-pools,\nbut updates to existing pools are not supported by the operator.",
          "type": [
            "string",
            "null"
          ]
        },
        "region": {
          "description": "Region (optional) provide a region for the location info\nof the endpoints in the endpoint deployment",
          "type": [
            "string",
            "null"
          ]
        },
        "security": {
          "description": "Security represents security settings",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "kms": {
              "description": "KeyManagementServiceSpec represent various details of the KMS server",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "connectionDetails": {
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "enableKeyRotation": {
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "schedule": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "tokenSecretName": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "tolerations": {
          "description": "Tolerations (optional) passed through to noobaa's pods",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple <key,value,effect> using the matching operator <operator>.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "effect": {
                "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "key": {
                "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "operator": {
                "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "tolerationSeconds": {
                "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64"
              },
              "value": {
                "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "Most recently observed status of the noobaa system.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "accounts": {
          "description": "Accounts reports accounts info for the admin account",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "admin"
          ],
          "properties": {
            "admin": {
              "description": "UserStatus is the status info of a user secret",
              "type": "object",
              "required": [
                "secretRef"
              ],
              "properties": {
                "secretRef": {
                  "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret\nin any namespace",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "name is unique within a namespace to reference a secret resource.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "namespace defines the space within which the secret name must be unique.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "actualImage": {
          "description": "ActualImage is set to report which image the operator is using",
          "type": [
            "string",
            "null"
          ]
        },
        "beforeUpgradeDbImage": {
          "description": "BeforeUpgradeDbImage is the db image used before last db upgrade",
          "type": [
            "string",
            "null"
          ]
        },
        "conditions": {
          "description": "Conditions is a list of conditions related to operator reconciliation",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "Condition represents the state of the operator's\nreconciliation functionality.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastHeartbeatTime": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "lastTransitionTime": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "message": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "reason": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "status": {
                "type": "string"
              },
              "type": {
                "description": "ConditionType is the state of the operator's reconciliation functionality.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "endpoints": {
          "description": "Endpoints reports the actual number of endpoints in the endpoint deployment\nand the virtual hosts list used recognized by the endpoints",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "readyCount",
            "virtualHosts"
          ],
          "properties": {
            "readyCount": {
              "type": "integer",
              "format": "int32"
            },
            "virtualHosts": {
              "type": "array",
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "additionalProperties": false
        },
        "lastKeyRotateTime": {
          "description": "LastKeyRotateTime is the time system ran an encryption key rotate",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the most recent generation observed for this noobaa system.\nIt corresponds to the CR generation, which is updated on mutation by the API Server.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "phase": {
          "description": "Phase is a simple, high-level summary of where the System is in its lifecycle",
          "type": [
            "string",
            "null"
          ]
        },
        "postgresUpdatePhase": {
          "description": "Upgrade reports the status of the ongoing postgres upgrade process",
          "type": [
            "string",
            "null"
          ]
        },
        "readme": {
          "description": "Readme is a user readable string with explanations on the system",
          "type": [
            "string",
            "null"
          ]
        },
        "relatedObjects": {
          "description": "RelatedObjects is a list of objects related to this operator.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldPath": {
                "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "kind": {
                "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": [
                  "string",
                  "null"
                ]
              },
              "name": {
                "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                "type": [
                  "string",
                  "null"
                ]
              },
              "namespace": {
                "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                "type": [
                  "string",
                  "null"
                ]
              },
              "resourceVersion": {
                "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": [
                  "string",
                  "null"
                ]
              },
              "uid": {
                "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
          }
        },
        "services": {
          "description": "Services reports addresses for the services",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "serviceMgmt",
            "serviceS3"
          ],
          "properties": {
            "serviceMgmt": {
              "description": "ServiceStatus is the status info and network addresses of a service",
              "type": "object",
              "properties": {
                "externalDNS": {
                  "description": "ExternalDNS are external public addresses for the service",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "externalIP": {
                  "description": "ExternalIP are external public addresses for the service\nLoadBalancerPorts such as AWS ELB provide public address and load balancing for the service\nIngressPorts are manually created public addresses for the service\nhttps://kubernetes.io/docs/concepts/services-networking/service/#external-ips\nhttps://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer\nhttps://kubernetes.io/docs/concepts/services-networking/ingress/",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "internalDNS": {
                  "description": "InternalDNS are internal addresses of the service inside the cluster",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "internalIP": {
                  "description": "InternalIP are internal addresses of the service inside the cluster\nhttps://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "nodePorts": {
                  "description": "NodePorts are the most basic network available.\nNodePorts use the networks available on the hosts of kubernetes nodes.\nThis generally works from within a pod, and from the internal\nnetwork of the nodes, but may fail from public network.\nhttps://kubernetes.io/docs/concepts/services-networking/service/#nodeport",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "podPorts": {
                  "description": "PodPorts are the second most basic network address.\nEvery pod has an IP in the cluster and the pods network is a mesh\nso the operator running inside a pod in the cluster can use this address.\nNote: pod IPs are not guaranteed to persist over restarts, so should be rediscovered.\nNote2: when running the operator outside of the cluster, pod IP is not accessible.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "additionalProperties": false
            },
            "serviceS3": {
              "description": "ServiceStatus is the status info and network addresses of a service",
              "type": "object",
              "properties": {
                "externalDNS": {
                  "description": "ExternalDNS are external public addresses for the service",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "externalIP": {
                  "description": "ExternalIP are external public addresses for the service\nLoadBalancerPorts such as AWS ELB provide public address and load balancing for the service\nIngressPorts are manually created public addresses for the service\nhttps://kubernetes.io/docs/concepts/services-networking/service/#external-ips\nhttps://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer\nhttps://kubernetes.io/docs/concepts/services-networking/ingress/",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "internalDNS": {
                  "description": "InternalDNS are internal addresses of the service inside the cluster",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "internalIP": {
                  "description": "InternalIP are internal addresses of the service inside the cluster\nhttps://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "nodePorts": {
                  "description": "NodePorts are the most basic network available.\nNodePorts use the networks available on the hosts of kubernetes nodes.\nThis generally works from within a pod, and from the internal\nnetwork of the nodes, but may fail from public network.\nhttps://kubernetes.io/docs/concepts/services-networking/service/#nodeport",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "podPorts": {
                  "description": "PodPorts are the second most basic network address.\nEvery pod has an IP in the cluster and the pods network is a mesh\nso the operator running inside a pod in the cluster can use this address.\nNote: pod IPs are not guaranteed to persist over restarts, so should be rediscovered.\nNote2: when running the operator outside of the cluster, pod IP is not accessible.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "additionalProperties": false
            },
            "serviceSts": {
              "description": "ServiceStatus is the status info and network addresses of a service",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "externalDNS": {
                  "description": "ExternalDNS are external public addresses for the service",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "externalIP": {
                  "description": "ExternalIP are external public addresses for the service\nLoadBalancerPorts such as AWS ELB provide public address and load balancing for the service\nIngressPorts are manually created public addresses for the service\nhttps://kubernetes.io/docs/concepts/services-networking/service/#external-ips\nhttps://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer\nhttps://kubernetes.io/docs/concepts/services-networking/ingress/",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "internalDNS": {
                  "description": "InternalDNS are internal addresses of the service inside the cluster",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "internalIP": {
                  "description": "InternalIP are internal addresses of the service inside the cluster\nhttps://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "nodePorts": {
                  "description": "NodePorts are the most basic network available.\nNodePorts use the networks available on the hosts of kubernetes nodes.\nThis generally works from within a pod, and from the internal\nnetwork of the nodes, but may fail from public network.\nhttps://kubernetes.io/docs/concepts/services-networking/service/#nodeport",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "podPorts": {
                  "description": "PodPorts are the second most basic network address.\nEvery pod has an IP in the cluster and the pods network is a mesh\nso the operator running inside a pod in the cluster can use this address.\nNote: pod IPs are not guaranteed to persist over restarts, so should be rediscovered.\nNote2: when running the operator outside of the cluster, pod IP is not accessible.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "additionalProperties": false
            },
            "serviceSyslog": {
              "description": "ServiceStatus is the status info and network addresses of a service",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "externalDNS": {
                  "description": "ExternalDNS are external public addresses for the service",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "externalIP": {
                  "description": "ExternalIP are external public addresses for the service\nLoadBalancerPorts such as AWS ELB provide public address and load balancing for the service\nIngressPorts are manually created public addresses for the service\nhttps://kubernetes.io/docs/concepts/services-networking/service/#external-ips\nhttps://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer\nhttps://kubernetes.io/docs/concepts/services-networking/ingress/",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "internalDNS": {
                  "description": "InternalDNS are internal addresses of the service inside the cluster",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "internalIP": {
                  "description": "InternalIP are internal addresses of the service inside the cluster\nhttps://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "nodePorts": {
                  "description": "NodePorts are the most basic network available.\nNodePorts use the networks available on the hosts of kubernetes nodes.\nThis generally works from within a pod, and from the internal\nnetwork of the nodes, but may fail from public network.\nhttps://kubernetes.io/docs/concepts/services-networking/service/#nodeport",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "podPorts": {
                  "description": "PodPorts are the second most basic network address.\nEvery pod has an IP in the cluster and the pods network is a mesh\nso the operator running inside a pod in the cluster can use this address.\nNote: pod IPs are not guaranteed to persist over restarts, so should be rediscovered.\nNote2: when running the operator outside of the cluster, pod IP is not accessible.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "upgradePhase": {
          "description": "Upgrade reports the status of the ongoing upgrade process",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "noobaa.io",
      "kind": "NooBaa",
      "version": "v1alpha1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}