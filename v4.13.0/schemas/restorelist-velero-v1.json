{
  "description": "RestoreList is a list of Restore",
  "required": [
    "items"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "velero.io/v1"
      ]
    },
    "items": {
      "description": "List of restores. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "Restore is a Velero resource that represents the application of resources from a Velero backup to a target Kubernetes cluster.",
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "velero.io/v1"
            ]
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "Restore"
            ]
          },
          "metadata": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "annotations": {
                "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "creationTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "deletionGracePeriodSeconds": {
                "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64"
              },
              "deletionTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "finalizers": {
                "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "x-kubernetes-patch-strategy": "merge"
              },
              "generateName": {
                "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                "type": [
                  "string",
                  "null"
                ]
              },
              "generation": {
                "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64"
              },
              "labels": {
                "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "managedFields": {
                "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "fieldsType": {
                      "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "fieldsV1": {
                      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "manager": {
                      "description": "Manager is an identifier of the workflow managing these fields.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "operation": {
                      "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "subresource": {
                      "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "time": {
                      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                      "type": [
                        "string",
                        "null"
                      ],
                      "format": "date-time"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "name": {
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": [
                  "string",
                  "null"
                ]
              },
              "namespace": {
                "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                "type": [
                  "string",
                  "null"
                ]
              },
              "ownerReferences": {
                "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "apiVersion",
                    "kind",
                    "name",
                    "uid"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "blockOwnerDeletion": {
                      "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "controller": {
                      "description": "If true, this reference points to the managing controller.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                },
                "x-kubernetes-patch-merge-key": "uid",
                "x-kubernetes-patch-strategy": "merge"
              },
              "resourceVersion": {
                "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": [
                  "string",
                  "null"
                ]
              },
              "selfLink": {
                "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "uid": {
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          },
          "spec": {
            "description": "RestoreSpec defines the specification for a Velero restore.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "backupName"
            ],
            "properties": {
              "backupName": {
                "description": "BackupName is the unique name of the Velero backup to restore from.",
                "type": "string"
              },
              "excludedNamespaces": {
                "description": "ExcludedNamespaces contains a list of namespaces that are not included in the restore."
              },
              "excludedResources": {
                "description": "ExcludedResources is a slice of resource names that are not included in the restore."
              },
              "existingResourcePolicy": {
                "description": "ExistingResourcePolicy specifies the restore behavior for the kubernetes resource to be restored"
              },
              "hooks": {
                "description": "Hooks represent custom behaviors that should be executed during or post restore.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "resources": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "description": "RestoreResourceHookSpec defines one or more RestoreResrouceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "excludedNamespaces": {
                          "description": "ExcludedNamespaces specifies the namespaces to which this hook spec does not apply."
                        },
                        "excludedResources": {
                          "description": "ExcludedResources specifies the resources to which this hook spec does not apply."
                        },
                        "includedNamespaces": {
                          "description": "IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces."
                        },
                        "includedResources": {
                          "description": "IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources."
                        },
                        "labelSelector": {
                          "description": "LabelSelector, if specified, filters the resources to which this hook spec applies."
                        },
                        "name": {
                          "description": "Name is the name of this hook.",
                          "type": "string"
                        },
                        "postHooks": {
                          "description": "PostHooks is a list of RestoreResourceHooks to execute during and after restoring a resource.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "description": "RestoreResourceHook defines a restore hook for a resource.",
                            "type": [
                              "object",
                              "null"
                            ],
                            "properties": {
                              "exec": {
                                "description": "Exec defines an exec restore hook.",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "required": [
                                  "command"
                                ],
                                "properties": {
                                  "command": {
                                    "description": "Command is the command and arguments to execute from within a container after a pod has been restored.",
                                    "type": "array",
                                    "minItems": 1,
                                    "items": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "container": {
                                    "description": "Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "execTimeout": {
                                    "description": "ExecTimeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "onError": {
                                    "description": "OnError specifies how Velero should behave if it encounters an error executing this hook.",
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "enum": [
                                      "Continue",
                                      "Fail"
                                    ]
                                  },
                                  "waitTimeout": {
                                    "description": "WaitTimeout defines the maximum amount of time Velero should wait for the container to be Ready before attempting to run the command.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              "init": {
                                "description": "Init defines an init restore hook.",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "properties": {
                                  "initContainers": {
                                    "description": "InitContainers is list of init containers to be added to a pod during its restore.",
                                    "x-kubernetes-preserve-unknown-fields": true
                                  },
                                  "timeout": {
                                    "description": "Timeout defines the maximum amount of time Velero should wait for the initContainers to complete.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              },
              "includeClusterResources": {
                "description": "IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the restore. If null, defaults to true."
              },
              "includedNamespaces": {
                "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included."
              },
              "includedResources": {
                "description": "IncludedResources is a slice of resource names to include in the restore. If empty, all resources in the backup are included."
              },
              "itemOperationTimeout": {
                "description": "ItemOperationTimeout specifies the time used to wait for RestoreItemAction operations The default value is 1 hour.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "labelSelector": {
                "description": "LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional."
              },
              "namespaceMapping": {
                "description": "NamespaceMapping is a map of source namespace names to target namespace names to restore into. Any source namespaces not included in the map will be restored into namespaces of the same name.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "orLabelSelectors": {
                "description": "OrLabelSelectors is list of metav1.LabelSelector to filter with when restoring individual objects from the backup. If multiple provided they will be joined by the OR operator. LabelSelector as well as OrLabelSelectors cannot co-exist in restore request, only one of them can be used"
              },
              "preserveNodePorts": {
                "description": "PreserveNodePorts specifies whether to restore old nodePorts from backup."
              },
              "restorePVs": {
                "description": "RestorePVs specifies whether to restore all included PVs from snapshot"
              },
              "restoreStatus": {
                "description": "RestoreStatus specifies which resources we should restore the status field. If nil, no objects are included. Optional."
              },
              "scheduleName": {
                "description": "ScheduleName is the unique name of the Velero schedule to restore from. If specified, and BackupName is empty, Velero will restore from the most recent successful backup created from this schedule.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          },
          "status": {
            "description": "RestoreStatus captures the current status of a Velero restore",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "completionTimestamp": {
                "description": "CompletionTimestamp records the time the restore operation was completed. Completion time is recorded even on failed restore. The server's time is used for StartTimestamps",
                "format": "date-time"
              },
              "errors": {
                "description": "Errors is a count of all error messages that were generated during execution of the restore. The actual errors are stored in object storage.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "failureReason": {
                "description": "FailureReason is an error that caused the entire restore to fail.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "phase": {
                "description": "Phase is the current state of the Restore",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "New",
                  "FailedValidation",
                  "InProgress",
                  "WaitingForPluginOperations",
                  "WaitingForPluginOperationsPartiallyFailed",
                  "Completed",
                  "PartiallyFailed",
                  "Failed"
                ]
              },
              "progress": {
                "description": "Progress contains information about the restore's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a restore for any reason, it may be inaccurate/stale."
              },
              "restoreItemOperationsAttempted": {
                "description": "RestoreItemOperationsAttempted is the total number of attempted async RestoreItemAction operations for this restore.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "restoreItemOperationsCompleted": {
                "description": "RestoreItemOperationsCompleted is the total number of successfully completed async RestoreItemAction operations for this restore.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "restoreItemOperationsFailed": {
                "description": "RestoreItemOperationsFailed is the total number of async RestoreItemAction operations for this restore which ended with an error.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "startTimestamp": {
                "description": "StartTimestamp records the time the restore operation was started. The server's time is used for StartTimestamps",
                "format": "date-time"
              },
              "validationErrors": {
                "description": "ValidationErrors is a slice of all validation errors (if applicable)"
              },
              "warnings": {
                "description": "Warnings is a count of all warning messages that were generated during execution of the restore. The actual warnings are stored in object storage.",
                "type": [
                  "integer",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "x-kubernetes-group-version-kind": [
          {
            "group": "velero.io",
            "kind": "Restore",
            "version": "v1"
          }
        ],
        "additionalProperties": false
      }
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "RestoreList"
      ]
    },
    "metadata": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": [
            "string",
            "null"
          ]
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": [
            "string",
            "null"
          ]
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "velero.io",
      "kind": "RestoreList",
      "version": "v1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#",
  "type": "object"
}